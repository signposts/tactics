A note to the programmer:

You need to create following shell scripts and folders in order to contribute any tactics:

> register.sh 
	This will add the name of the tactic in `index` file and will add tactic folder in the repository. It shall be run only once by the programmer to 		add the tactic to the repository.
> install.sh
	This will install the necessary packages for the tactic. Both client and server need to run this. It shall be run only once.
> stop.sh
	This will stop the tactic which is running in the client and server. Both client and server need to run this to stop the ongoing service.
> client
	This folder will contain shell scripts as following which start the client:
		> aprior.sh - This script contains all the stuff necessary to set up the client. It will contain commands to copy all the files which are 			generated by server tactic to be used by client to establish tunnel between client and server.
		> initialize_client.sh - This is the final script which will start client.
		> parameters - This is the file which contains parameters to start client. The parameteres change from client to client.
> tactic_server
	This folder will contain shell scripts as following which start the client:
		> aprior.sh - This script contains all the stuff necessary to set up the server. It will contain commands to generate all the files which 			are used by client to establish tunnel between client and server.
		> initialize_client.sh - This is the final script which will start server.
		> parameters - This is the file which contains parameters to start server. The parameteres change from server to server.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Some guidance to github (Getting a repository, making changes and uploading in git):

1. Clone a repository
> git clone https://github.com/signposts/tactics.git

2. Make changes to the repository (add/delete/modify files/folders)
> cd tactics

3. Add changes 
> git add ./

4. Commit changes
> git commit

5. Push back the repository 
> git push origin master

NOTE: If a file/folder is deleted do
	git commit -a
      instead of git commit

------------------------------------------------------------------------------------------------------------------------------------------------------------

Generating keys between client and server:

Keys are needed so that all the file transfers and necessary communication between client and server is done without password.

First, make sure there exists a directory /root/.ssh. This can be checked by:

> sudo su

> cd .ssh

If you are able to cd to .ssh directory being a root, then there exists .ssh file in root. If you are not able to do cd, then you need to make .ssh directory. For this:

> sudo su

> cd

> mkdir .ssh

Type following commands at client [Before this, make sure /root/.ssh exists as mentioned above]:

> ssh-keygen
	After this, you will be asked to specify name of the key file with full path. Give name as /home/machine_name/.ssh/key_file_name
	(machine_name is the name of machine. Check it by typing: echo $HOME at terminal). Don't enter any passphrase, when prompted to do so.

> ssh-add /home/machine_name/.ssh/key_file_name
	This will add the keys to authentication agent.

> ssh-copy-id -i /home/machine_name/.ssh/key_file_name.pub server_name@server_IP
	This will copy public key from client as 'authorized_keys' file at server machine

> sudo cp /home/machine_name/.ssh/key_file_name /root/.ssh/
	This will copy private key to root ssh directory. This is needed when scp or ssh is done with sudo.

--------------------------------------------------------------------------------------------------------------------------------------------------------------

Files in this folder other than available tactics

> index
	This file contains list of tactics which are available. When register.sh in each tactic folder is run, it registers each tactic and its name is 	displayed in this file and  tactic folder is pasted in this the repository.

> config
	This file contains parameters which are not any tactic specific and are needed to connect client and server. Till now 3 parameters are there:
		> server_name: machine name of the server
		> server_ip: IP of the server
		> path_to_key: Give full path to the private key as created above in client (example: /root/.ssh/key_file_name)

	All the values to the above parameters must be given with 1 tab space.

> client.sh
	This shell script will run the following scripts of each existing tactic in the repository:
		> install.sh: This will install all the packages necessary for each tactic.
		> aprior.sh: This will do all the stuff necessary to set the client of each tactic like copying files which are generated by server to be 			used by client.
		> initialize_client.sh: This will start the clients for each tactic.

	NOTE: BEFORE RUNNING client.sh, server.sh SHOULD BE RUN AT SERVER ie SERVER SHOULD BE UP AND RUNNING BEFORE CLIENT

> server.sh
	This shell script will run the following scripts of each existing tactic in the repository:
		> install.sh: This will install all the packages necessary for each tactic.
		> aprior.sh: This will do all the stuff necessary to set the server of each tactic like generating files which are needed by client.
		> initialize_server.sh: This will start the servers for each tactic.

	NOTE: BEFORE RUNNING client.sh, server.sh SHOULD BE RUN AT SERVER ie SERVER SHOULD BE UP AND RUNNING BEFORE CLIENT

> client_stop.sh
	This will stop all the tactics at client side

> server_stop.sh
	This will stop all the tactics at server side

NOTE: BEFORE RUNNING client_stop.sh, server_stop.sh should be run

----------------------------------------------------------------------------------------------------------------------------------------------------------------

About some tactics:

1. openVPN
 
Commands:

Clone the repository:
> git clone https://github.com/signposts/tactics.git

> sh your_path_to_folder_containg_tactic/register.sh name_of_tactic
	-> Run this once from any system. It need not be a client or server system.
	->This will copy entire folder of the tactic openvpn to repository signposts/tactics and also will add name of the tactic (openvpn) in the signposts/tactics/index file.

Server:
> sudo sh ~/tactics/openvpn_19.3/install.sh
	->Run this only once as this is needed to install openvpn in the server.
> sudo sh ~/tactics/openvpn_19.3/openvpn_server_me/initialize_server.sh country_name province_name city_name origin_name email 
	->This will create a folder `ov_me` in HOME directory with all the scripts necessary to generate keys and `vars file `containing usersâ€™own description for 	country, city etc.
	->NOTE: country_name and province_name should have only 2 alphabets.
> cd $HOME/ov_me
> source vars
> sh ~/tactics/openvpn_19.3/openvpn_server_me/keygen.sh hostname_of_client    
	 #eg: bishneet(this should match $SUDO_USER in client system)
 	-> This will create all the certificates for server and client. Client certificates need to be copied by them in their HOME directory (It will be done by 		another shell script)
> sudo sh ~/tactics/openvpn_19.3/openvpn_server_me/server.conf.sh port_number    
	#here: 5060 
	-> This will create server.conf in `ov_me` and will start openvpn at server on the port specified above. After this, server is up and running and a new 	interface `tun0` is created with ip: 10.8.0.1. Ping from client using this IP (when the client is up and running).

Client:
	[Prior to this server should be up and running]
> sudo sh ~/tactics/openvpn_19.3/install.sh
	-> Run this only once as this is needed to install openvpn in the client.
> sudo sh ~/tactics/openvpn_19.3/openvpn_client_me/initialize_client.sh hostname_of_server public_ip_server 
	-> This will create a folder `ov_me_client` and copy all the certificates for client from server machine. Note: this is using scp, so the key to connect to 		server should be there in ~/.ssh folder in client system.
> sudo sh ~/tactics/openvpn_19.3/openvpn_client_me/client.conf.sh public_ip_server port_number
	->This will create client.conf in `ov_me_client`and will start openvpn at client on port specified. After this client is up and running and a new interface 	`tun0` is created with ip: 10.8.0.x. Ping from server using this IP.

2. Tor

Commands:

Clone the repository:
> git clone https://github.com/signposts/tactics.git

> sh your_path_to_folder_containg_tactic/register.sh name_of_tactic
	->Run this once from any system. It need not be a client or server system.
	->This will copy entire folder of the tactic tor to repository signposts/tactics and also will add name of the tactic (tor) in the signposts/tactics/index 		file.

Server:

> sudo sh ~/tactics/tor_19.3/install.sh
	-> Run this only once as this is needed to install tor in the server.
> sudo sh ~/tactics/tor_19.3/tor_server/initialize_server.sh port_number
	->This will create a folder `tor` in HOME directory. And start tor at server. 
	-> Port number will specify the port at which hidden-service will run. As tor starts, hidden-service will be given a domain name(with .onion extension). 		This domain name will be stored in a file $HOME/tor/hidden_service/hostname.
> sudo sh ~/tactics/tor_19.3/tor_server/filegen.sh 
	-> This will change permission of $HOME/tor/hidden_service which contains file `hostname`. Also, it will copy `hostname` to HOME directory. This `hostname`  		is copied by the client so that it can connect through this hidden_service to server.

Client:

[Prior to this server should be up and running]

> sudo sh ~/tactics/tor_19.3/install.sh
	-> Run this only once as this is needed to install tor in the client.
> sudo sh ~/tactics/tor_19.3/tor_client/install_extra.sh
	-> This will install extra softwares like curl, which are needed by client. Run this only once.
> sudo sh ~/tactics/tor_19.3/tor_client/initialize_client.sh hostname_server public_ip_server port_number	
	-> This will create a folder `tor_me` in HOME directory. `hostname` from server will be pasted in this and contents are stored in a variable. Using these 		contents (domain name of hidden_service), connection between client and server is established. Note: this is using scp, so the key to connect to server 	should be there in ~/.ssh folder in client system.
  NOTE: port_number should be the same given by the server where hidden-service is running 
	-> After this client is also up and running. You can see html commands containing elements of HOME directory of server are displayed.

3. ssh_tap

Commands:

Clone the repository:
> git clone https://github.com/signposts/tactics.git

> sh your_path_to_folder_containg_tactic/register.sh name_of_tactic
	->Run this once from any system. It need not be a client or server system.
	->This will copy entire folder of the tactic ssh_tap to repository signposts/tactics and also will add name of the tactic (ssh_tap) in the signposts/tactics/index file.

Server:

> sudo sh ~/tactics/ssh_tap_6.4/install.sh
	-> Run this only once as this is needed to install ssh in the server and some additional softwares.

NOTE: Make changes to /etc/ssh/sshd_config (open /etc/ssh/sshd_config with any editor)
	Add PermitTunnel yes
	    PermitRootLogin yes
     Restart ssh (so that changes get reflected)
	> sudo /etc/init.d/ssh restart

> sudo sh ~/tactics/ssh_tap_6.4/ssh_tap_server/iface_setup.sh device_number
	-> device_number will specify the device number for the tap interface (eg. tap0, tap1 etc.). After this, interface is set up and a IP is given to 		   that interface.

Client:

> sudo sh ~/tactics/tor_19.3/install.sh
	-> Run this only once as this is needed to install ssh in the client and some additional softwares.

> sudo sh ~/tactics/ssh_tap_6.4/ssh_tap_client/iface_setup.sh.sh device_number
	-> device_number will specify the device number for the tap interface (eg. tap0, tap1 etc.). After this, interface is set up and a IP is given to 		   that interface.

> sudo sh ~/tactics/ssh_tap_6.4/ssh_tap_client/initialize_client.sh device_number hostname host_ip
	-> device_number must be the SAME as mentioned above to set up the interface. Hostanme and public IP of the host must be mentioned.

After this, client will get remote terminal for the server. Both client and server can ping each other using the IP assigned to tha tap interface. (IP assigned to the interface can be seen using ifconfig) 


4. ssh_tun

Commands:

Clone the repository:
> git clone https://github.com/signposts/tactics.git

> sh your_path_to_folder_containg_tactic/register.sh name_of_tactic
	->Run this once from any system. It need not be a client or server system.
	->This will copy entire folder of the tactic ssh_tun to repository signposts/tactics and also will add name of the tactic (ssh_tun) in the signposts/tactics/index file.

Server:

> sudo sh ~/tactics/ssh_tun_6.4/install.sh
	-> Run this only once as this is needed to install ssh in the server and some additional softwares.

NOTE: Make changes to /etc/ssh/sshd_config (open /etc/ssh/sshd_config with any editor)
	Add PermitTunnel yes
	    PermitRootLogin yes
     Restart ssh (so that changes get reflected)
	> sudo /etc/init.d/ssh restart

After this go to Client and start ssh from Client

Client:

> sudo sh ~/tactics/ssh_tun_6.4/install.sh
	-> Run this only once as this is needed to install ssh in the server and some additional softwares.

> sudo sh ~/tactics/ssh_tun_6.4/ssh_tun_client/initialize_client.sh device_number host_ip
	-> device_number will set the device number for tun interface. Host_ip is the public IP for the server with whom to make ssh connection.

After this, Client will get remote terminal for the Server. Now configure tun interfaces for both Client and Server as:

Client: 

> sudo sh ~/tactics/ssh_tun_6.4/ssh_tun_client/config_iface.sh device_number 
	-> device_number must be the SAME as mentioned above, to configure the above created tun interface. 

Server:

> sudo sh ~/tactics/ssh_tun_6.4/ssh_tun_server/config_iface.sh device_number 
	-> device_number must be the SAME as mentioned above, to configure the above created tun interface.

Both client and server can ping each other using the IP assigned to tha tun interface. (IP assigned to the interface can be seen using ifconfig)


Special Notes

-> Any running tactic can be stopped by running stop.sh present in the respective tactics folder.
-> If any changes to repository are made by adding or deleting a tactics, donâ€™t forget to add and commit those changes and pushing the repository back.



